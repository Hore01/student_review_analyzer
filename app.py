# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zAmIwrKGFV9G2laqOswo5SVYOD5qu3aA
"""

import streamlit as st
import pandas as pd
import joblib
import re
import nltk

# Download required NLTK data
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')

from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer

# Load models
lda_model = joblib.load("lda_topic_model.pkl")
vectorizer = joblib.load("lda_vectorizer.pkl")

# Topic labels
topic_labels = {
    0: "Instructor Clarity & Practical Skills",
    1: "Examples & Recommendations",
    2: "Engagement & Feedback Quality",
    3: "Teaching Style & Explanations",
    4: "Course Structure Issues",
    5: "Pacing & Attention Challenges",
    6: "Responsiveness & Interaction",
    7: "Overall Learning Experience",
    8: "Content Clarity & Pacing Problems",
    9: "Content Quality & Timely Feedback"
}

# Text preprocessing
analyzer = SentimentIntensityAnalyzer()
stop_words = set(stopwords.words("english"))
lemmatizer = WordNetLemmatizer()

def clean_text(text):
    text = text.lower()
    text = re.sub(r"[^a-z\s]", "", text)
    tokens = nltk.word_tokenize(text)
    tokens = [lemmatizer.lemmatize(word) for word in tokens if word not in stop_words]
    return " ".join(tokens)

def label_sentiment(score):
    if score >= 0.05:
        return "Positive"
    elif score <= -0.05:
        return "Negative"
    else:
        return "Neutral"

def analyze_review(review_text):
    clean = clean_text(review_text)
    sentiment_score = analyzer.polarity_scores(clean)["compound"]
    sentiment_label = label_sentiment(sentiment_score)

    dtm = vectorizer.transform([clean])
    topic_distribution = lda_model.transform(dtm)[0]
    topic_label = topic_distribution.argmax()
    confidence = topic_distribution.max()
    topic_name = topic_labels.get(topic_label, "Unknown Topic")

    return sentiment_label, sentiment_score, topic_name, confidence

# Streamlit UI
st.set_page_config(page_title="Student Review Analyzer")

st.title("🎓 Student Review Analyzer")
st.markdown("Enter your course feedback to get instant **sentiment** and **topic** insights.")

user_input = st.text_area("✏️ Write your review here:", height=150)

if st.button("Analyze"):
    if user_input.strip():
        sentiment, score, topic, conf = analyze_review(user_input)
        st.success(f"**Sentiment:** {sentiment} (score: {score:.2f})")
        st.info(f"**Detected Topic:** {topic} (confidence: {conf:.2f})")

        result = {
            "review_text": user_input,
            "sentiment": sentiment,
            "sentiment_score": score,
            "topic": topic,
            "confidence": conf
        }
        df = pd.DataFrame([result])
        try:
            df.to_csv("streamlit_review_log.csv", mode='a', index=False,
                      header=not pd.io.common.file_exists("streamlit_review_log.csv"))
        except:
            st.warning("⚠️ Unable to save the result.")
    else:
        st.warning("Please enter a review before clicking Analyze.")
